

//
//
//  def isSenderAdmin(msg: Message): Boolean = {
//    implicit val msg2 = msg
//    val senderAdmin = msg.from.exists(_.id == rootId)
//    if(!senderAdmin){
//      reply(BotTexts.rootCmdOnlyText)
//    }
//    senderAdmin
//  }
//
//  def isNotCommand(msg:Message): Boolean = {
//    msg.text.exists(!_.startsWith("/")) || msg.text.isEmpty
//  }
//
//
//    def handlePhotoMessage(msg:Message) = {
//      mylog.info("photo is defined")
//      request(GetFile(msg.photo.get.head.fileId)).onComplete{
//        case Success(file) =>
//          file.filePath match {
//
//            case Some(filePath) =>
//              // See https://core.telegram.org/bots/api#getfile
//              val url = s"https://api.telegram.org/file/bot${token}/${filePath}"
//
//              fileDownloader(url,filePath)
//
//            case None =>
//              println("No file_path was returned")
//          }
//
//        case Failure(e) =>
//          logger.error("Exception: " + e) // poor's man logging
//      }
//    }
//
//

//


//
//  onCommand("/name") { implicit msg => addedToUsers { handler =>
//      mylog.info("Changing name")
//    }
//  }
//

//

//
//  onCommand("/r") { implicit msg =>
//    addedToUsers { handler =>
//      isAdmin { admin =>
//        val msg = getUsersOrderedByPoints().zipWithIndex.map{
//            case (ur,ind) => val a = BotTexts.getResultsText(ind+1,ur)
//              mylog.info(s"$ur")
//            mylog.info(s"Text: $a")
//            a
//        }.mkString("\n")
//        sendToAllUsers(msg)
//      }
//    }
//  }
//
//  onCommand("/u"){ implicit msg =>
//    addedToUsers { handler =>
//      isAdmin { admin =>
//        val msg2 = chatActors.map { case (chatId,(aref,user)) =>
//          s"${user.chatId} - ${user.firstName.getOrElse("")} - ${user.lastName.getOrElse("")} - ${user.username.getOrElse("")}"
//        }.mkString("\n")
//        reply(msg2)
//      }
//    }
//  }
//
//
//
//
//
//  onMessage { implicit msg:Message =>
//    addedToUsers { handler =>
//      isNotCommand { _ =>
//          if(msg.photo.isDefined){
//            handlePhotoMessage(msg)
//        }else {
//          handler ! msg
//        }
//      }
//    }
//  }
//
//
//
//
//
//  def updateResults(ur:UserResult) = {
//    userResults.put(ur.user.chatId,ur)
//  }
//
//  def getUsersOrderedByPoints() ={
//    userResults.toSeq.sortBy(_._2.result).map(_._2).reverse
//  }
//
//
//  class BotActor extends Actor {
//
//    override def receive = {
//
//
//
//      case ur: UserResult => updateResults(ur)
//
//      case newQuestion: NewQuestionToUsers => {
//        chatActors.foreach{
//          case (_,(actorRef,user)) => {
//            mylog.info(s"Sending a question to user ${user.chatId}")
//            actorRef ! newQuestion
//          }
//        }
//      }
//
//      case CountDownKeyboard(chatId,msgId,duration) => {
//        msgId match {
//          case None => {
//            val msgFuture = request(SendMessage(chatId,"Tiempo restante",replyMarkup = Some(getInlineKeyboard(duration))))
//            msgFuture.onComplete{
//              case Failure(exception) => mylog.error(s"Problem: ${exception.toString}",exception)
//              case Success(msg) => {
//                //mylog.info(s"Obtained MESSAGE WITH ID: ${msg.messageId}")
//                system.scheduler.scheduleOnce(1 seconds) {
//                  self ! CountDownKeyboard(chatId, Some(msg.messageId), duration - (1 seconds))
//                }
//              }
//            }
//          }
//          case _ => {
//            if(duration > (0 seconds)){
//              request(EditMessageReplyMarkup(Some(chatId),msgId,replyMarkup = Some(getInlineKeyboard(duration))))
//              system.scheduler.scheduleOnce(1 seconds){
//                self ! CountDownKeyboard(chatId,msgId, duration - (1 seconds))
//              }
//            }else{
//              request(DeleteMessage(chatId,msgId.get))
//              getActorRef(chatId).foreach{ case (ar,u) => ar ! QuestionTimeIsOver}
//            }
//
//          }
//        }
//      }
//    }
//
//    def getInlineKeyboard(duration:FiniteDuration) = {
//      val keytxt = duration.toSeconds.toInt match {
//          case 5 => BotTexts.t5sec
//          case 4 => BotTexts.t4sec
//          case 3 => BotTexts.t3sec
//          case 2 => BotTexts.t2sec
//          case 1 => BotTexts.t1sec
//          case n => n.toString+" segundos"
//        }
//      //mylog.info(s"String is $keytxt")
//      val keyboard = InlineKeyboardButton(keytxt, callbackData = Some("A"))
//      InlineKeyboardMarkup(Seq(Seq(keyboard)))
//    }
//  }

